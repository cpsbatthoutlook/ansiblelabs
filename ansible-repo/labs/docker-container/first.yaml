---
-  name: HA Proxy test
   ## yum -y install python-minimal python-pip
   ##  python -m pip install --upgrade pip
   ## pip install  docker 


   ## https://docs.ansible.com/ansible/latest/modules/docker_container_module.html#examples
   
   hosts: localhost
   gather_facts: no
   tasks: 
   - name: Run container
     docker_container:
            name: app1 # required. Assign a name to a new container or match an existing container.,When identifying an existing container name may be a name or a long or short container ID.
            image: nginx:1.17.8-alpine # not required. Repository path and tag used to create the container. If an image is not found or pull is true, the image will be pulled from the registry. If no tag is included, 'latest' will be used.
            networks: backend # not required. List of networks the container belongs to.,Each network is a dict with keys C(name), C(ipv4_address), C(ipv6_address), C(links), C(aliases).,For each network C(name) is required, all other keys are optional.,If included, C(links) or C(aliases) are lists.,For examples of the data structure and usage see EXAMPLES below.,To remove a container from one or more networks, use the C(purge_networks) option.,Note that as opposed to C(docker run ...), M(docker_container) does not remove the default network if C(networks) is specified. You need to explicity use C(purge_networks) to enforce the removal of the default network (and all other networks not explicitly mentioned in C(networks)).
            network_mode: host # not required. Connect the container to a network. Choices are "bridge", "host", "none" or "container:<name|id>"
            state: absent # not required. choices: absent;present;stopped;started. I(absent) - A container matching the specified name will be stopped and removed. Use force_kill to kill the container rather than stopping it. Use keep_volumes to retain volumes associated with the removed container.,I(present) - Asserts the existence of a container matching the name and any provided configuration parameters. If no container matches the name, a container will be created. If a container matches the name but the provided configuration does not match, the container will be updated, if it can be. If it cannot be updated, it will be removed and re-created with the requested config. Image version will be taken into account when comparing configuration. To ignore image version use the ignore_image option. Use the recreate option to force the re-creation of the matching container. Use force_kill to kill the container rather than stopping it. Use keep_volumes to retain volumes associated with a removed container.,I(started) - Asserts there is a running container matching the name and any provided configuration. If no container matches the name, a container will be created and started. If a container matching the name is found but the configuration does not match, the container will be updated, if it can be. If it cannot be updated, it will be removed and a new container will be created with the requested configuration and started. Image version will be taken into account when comparing configuration. To ignore image version use the ignore_image option. Use recreate to always re-create a matching container, even if it is running. Use restart to force a matching container to be stopped and restarted. Use force_kill to kill a container rather than stopping it. Use keep_volumes to retain volumes associated with a removed container.,I(stopped) - Asserts that the container is first I(present), and then if the container is running moves it to a stopped state. Use force_kill to kill a container rather than stopping it.
            exposed_ports: 8080 # not required. List of additional container ports which informs Docker that the container listens on the specified network ports at runtime. If the port is already exposed using EXPOSE in a Dockerfile, it does not need to be exposed again.
            # restart: no # not required. Use with started state to force a matching container to be stopped and restarted.
            # pull: no # not required. If true, always pull the latest version of an image. Otherwise, will only pull an image when missing.
            # debug: true # not required. Debug mode
            # #links: undefined # not required. List of name aliases for linked containers in the format C(container_name:alias).,Setting this will force container to be restarted.
            # #env_file: undefined # not required. Path to a file, present on the target, containing environment variables I(FOO=BAR).,If variable also present in C(env), then C(env) value will override.
            # hostname: app # not required. Container hostname.
            # # env: undefined # not required. Dictionary of key,value pairs.
            # auto_remove: yes # not required. enable auto-removal of the container on daemon side when the container's process exits
            # output_logs: yes # not required. If set to true, output of the container command will be printed (only effective when log_driver is set to json-file or journald.
            # restart_policy: no # not required. choices: no;on-failure;always;unless-stopped. Container restart policy. Place quotes around I(no) option.
            # volumes: undefined # not required. List of volumes to mount within the container.,Use docker CLI-style syntax: C(/host:/container[:mode]),You can specify a read mode for the mount with either C(ro) or C(rw).,SELinux hosts can additionally use C(z) or C(Z) to use a shared or private label for the volume.
            # restart_retries: 0 # not required. Use with restart policy to control maximum number of restart attempts.
...

